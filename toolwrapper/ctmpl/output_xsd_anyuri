        File #INPUT_VARIABLE# = new File(#INPUT_VARIABLE#Name);
        if (!#INPUT_VARIABLE#.exists() || #INPUT_VARIABLE#.length() == 0) {
            processing_message = "The expected output file " + #INPUT_VARIABLE#.getName() + " is empty or has not been created successfully.";
            return getErrorResponse#OPID#(Response#OPID#, response#OPID#Obj);
        }
        infolog("Output file of size " + #INPUT_VARIABLE#.length() + " has been created successfully");
        File public#TYPE_NAME# =
                new File(publicHttpAccessDir + #INPUT_VARIABLE#.getName());
        if (!new File(publicHttpAccessDir).isDirectory()) {
            processing_message = "The output directory "+publicHttpAccessDir+" does not exist. Check " +
                    "publicHttpAccessDir parameter in the " +
                    "resources/services.xml service configuration file";
            return getErrorResponse#OPID#(Response#OPID#, response#OPID#Obj);
        }
        infolog("Public output file: " + public#TYPE_NAME#.toString());
        try {
            FileUtils.copyFileTo(#INPUT_VARIABLE#, public#TYPE_NAME#);
        } catch(IOException _) {
            processing_message = "IOException";
            return getErrorResponse#OPID#(Response#OPID#, response#OPID#Obj);
        }
        URI #INPUT_VARIABLE#Uri = null;
        try {
            #INPUT_VARIABLE#Uri = new URI(publicHttpAccessUrl + public#TYPE_NAME#.getName());
        } catch (MalformedURIException ex) {
            processing_message =
                    "Malformed URL for binary result resource. Verify" +
                    "publicHttpAccessUrl parameter in the " +
                    "resources/services.xml. Exception message: " +
                    ex.getMessage();
            return getErrorResponse#OPID#(Response#OPID#, response#OPID#Obj);
        }
        infolog("Output URL: " + #INPUT_VARIABLE#Uri.toString());
        response#OPID#Obj.set#TYPE_NAME#(#INPUT_VARIABLE#Uri);
        #MAPPING#
        #OUTMAPPING#