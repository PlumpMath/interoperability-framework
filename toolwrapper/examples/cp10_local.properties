# Project properties
# -ic examples/cp10_local_inputconfig.json -oc examples/cp10_local_outputconfig.json -pc examples/cp10_local.properties
# The variables below can be used in the template code and configuration files.
# For example, the variable global.wrapper.version is #GLOBAL_WRAPPER_VERSION#
# in the template files (converting to uppercase and replacing '.' by '_').
# Note also that there are derived variables documented in this file with
# the comment prefix "#derived:" which means that the value of this variable
# also determines the value of derived variables created by simple string
# conversions.


# Global project settings
# Some global project settings that are supposed to be the same for the
# different tools that are created in a project.
# Wrapper version helps identifying which version of the wrapper was used
# to generate the code.
global.wrapper.version=0.1
# Year when the source code is generated
global.year=2011
# A global prefix that identifies the global project for which different
# tool wrappers are created
global.project.prefix=SCAPE
#derived: global.project.prefix.lc (global project prefix converted to lowercase)
# Note: The following path must correspond to the package path of the java source
# code files in template folder. For example, the template source code for
# the project package name "org.opflabs.scape.tb" must be placed in
# xa-toolwrapper/template/src/org/opflabs/scape/tb. You have to change the
# template source code path accordingly if you change the project package
# name below.
global.package.name=org.opflabs.scape.tb
#derived: project.package.path (path separator instead of dots)


# Tool properties
# Name of the command line tool
project.title=CP Local
#derived: project.midfix (without white space separator)
#derived: project.midfix.lc (midfix converted to lowercase)
# Version of the tool (only numbers separated by points should be used)
tool.version=1.0


# Service properties
# Description of the tool service, while one service is supposed to encompass
# different commands of the tool offered via various operations (see below).
service.description=Service for copying files
# Service operation settings, while one web service operation corresponds to
# one command that is defined for this operation.
service.operation.1=simplyCopy
service.operation.1.description=Copy a source file to a target file
service.operation.1.clicmd=cp @INFILE@ @OUTFILE@


# Settings of the deployment environment
# Identifier of the processing unit for the host, machine, and tomcat instance
# where the axis archive will be deployed.
tomcat.public.procunitid=http://localhost/scape/onbscs/tomcat1
# Hostname
tomcat.public.host=localhost
# HTTP Port
tomcat.public.http.port=8080
# HTTPS Port
tomcat.public.https.port=43
# Password for the public tomcat manager.
# Note that you cannot deploy the Axis2 service file using the Apache Tomcat
# Manager web application. You can only deploy web application archives (*.war),
# but not axis2 service archives (*.aar). Instead, you can copy the axis2
# service archives to the Axis2 services directory and subsequently reload the
# Axis2 web application using the Apache Tomcat Manager. See target
# "service.deploy.publicserver". Note that the user must have the role
# "manager" assigned in order to allow access to the tomcat manager webapp.
# Configure the user in apache-tomcat-<Version>/conf/tomcat-users.xml, e.g.:
# <tomcat-users>
#    <role rolename="manager"/>
#    <user password="somepassword" roles="manager" username="tomcat"/>
# </tomcat-users>
tomcat.public.manager.user=tomcat
# Tomcat manager password assigned above
tomcat.public.manager.pwd=undefined
# Use scp or cp for deployment of the axis archive (*.aar)
tomcat.public.scp=false
# Only set this user if using SCP for deployment (above tomcat.public.scp=true)
tomcat.public.scp.user=tomcat
# Only set this password if using SCP for deployment (above tomcat.public.scp=true)
tomcat.public.scp.pwd=undefined
# Context where the tomcat manager is available (normally "manager").
tomcat.public.manager.context=manager
# directory where your tomcat application server is installed
tomcat.public.home.dir=/usr/local/java/apache-tomcat-6.0.29/
# Absolute path to the webapps directory of tomcat
tomcat.public.webapps.dir=/usr/local/java/apache-tomcat-6.0.29/webapps/
# Public http access directory (where the tempory files are copied to)
tomcat.public.http.access.dir=/usr/local/java/apache-tomcat-6.0.29/webapps/ROOT/scape/tmp/
# Public http access directory (where the tempory files are accessible)
tomcat.public.http.access.url=http://localhost:8080/scape/tmp/
# Directory where the axis2 service archives (*.aar) can be copied to.
# Note that you cannot deploy the Axis2 service file using the Apache Tomcat
# Manager web application. You can only deploy web application archives (*.war),
# but not axis2 service archives (*.aar). Instead, you can copy the axis2
# service archives to the Axis2 services directory and subsequently reload the
# Axis2 web application using the Apache Tomcat Manager. See target
# "service.deploy.publicserver".
tomcat.public.axis.dir=/usr/local/java/apache-tomcat-6.0.29/webapps/axis2-l/WEB-INF/services/
# Tomcat axis services context
tomcat.public.axis.context=axis2-l
# Tomcat axis services path
tomcat.public.services.path=services


# Miscellaneous properties
# It should not be necessary to change these settings indicating in which
# subdirectory template, generated code, resources and libs can be found.
# Folder that contains the wrapper template
project.template.dir=template
# Folder that contains the generated projects
project.generate.dir=generated
# Resources directory
project.resources.dir=resources
# Libs that are needed to build the wrapper
project.lib.dir=lib
# JVM heap space the compiler is assigned when building the wrapper project
# using ant (see task -service.build in the build file template/build.xml).
jvm.heapspace.size=1024m
