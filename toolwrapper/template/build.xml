<?xml version="1.0"?>
<!--
/******************************************************************************* 
* Copyright (c) 2011 #GLOBAL_PROJECT_PREFIX#
* 
* All rights reserved. This program and the accompanying 
* materials are made available under the terms of the 
* Apache License, Version 2.0 which accompanies 
* this distribution, and is available at 
* http://www.apache.org/licenses/LICENSE-2.0 
* 
*******************************************************************************/
-->
<project name="#GLOBAL_PROJECT_PREFIX_LC#-#PROJECT_MIDFIX_LC#-service" basedir="." default="build">

    <description>
    Build file #GLOBAL_PROJECT_PREFIX# #PROJECT_TITLE#
    Version 2011-04-20
    Copyright 2011 by #GLOBAL_PROJECT_PREFIX#
    </description>

    <!-- ============ Main configuration properties file =================== -->

    <property file="${basedir}/build.properties"/>

    <!-- ==================== Properties =================================== -->

    <property name="project.root.dir" value="${basedir}"/>
    <property environment="env"/>
    <property name="build.dir" value="build" />
    <property name="build.service.dir" value="${build.dir}/service" />

    <!-- ======================= CHECK PROPERTIES ========================= -->

    <!-- Check the installation -->
    <target name="-check" description="Check installation">
        <echo level="info" message="Checking properties file ..."/>
        <antcall target="-check.props"/>
    </target>

    <!-- Check properties file -->
    <target name="-check.props" depends="-check.props.cond" unless="props.exist">
        <echo level="error" message="No build.properties found in the specified
project root directory ${project.root.dir}." />
        <fail message="ERROR: build.properties files not found"/>
    </target>
    <target name="-check.props.cond">
        <condition property="props.exist">
            <and>
                <available file="${project.root.dir}/build.properties"/>
            </and>
        </condition>
    </target>

    <target name="-check.tomcat.public.running"
    depends="-tomcat.public.isrunning"
    unless="tomcat.running">
        <echo level="error" message="Tomcat server must be running for the
operation that was going to be performed. Please verify if the public server is up and
running correctly and verify the tomcat related server settings (host, port) in the
build.properties file." />
        <fail message="ERROR: Tomcat server not running or settings incorrect."/>
    </target>

    <!-- =========================== CLASS PATH ============================ -->

    <!-- Add libraries to the class path -->
    <path id="class.path">
        <fileset dir="lib">
            <include name="**/*.jar" />
        </fileset>
        <pathelement location="./resources/"/>
    </path>

    <!-- ============================= SERVICE ============================= -->

    <target name="service.generate" description="Generate service code">
        <echo level="info" message="Generating service code from WSDL file ..."/>
        <java classname="org.apache.axis2.wsdl.WSDL2Java">
            <arg value="-uri" />
            <arg value="${basedir}/resources/${webservice.name}.wsdl" />
            <arg value="-ss" />
            <arg value="-ap" />
            <!-- Either activate the option "-sd" below in order to create a
                 services.xml using WSDL2Java or copy the services.xml with the
                 copy statement further below. -->
            <!-- <arg value="-sd" /> -->
            <arg value="-p" />
            <arg value="${project.package.name}.service" />
            <arg value="-o" />
            <arg value="${build.service.dir}" />
            <classpath refid="class.path" />
        </java>
        <!-- Either Copy the services.xml with the statement below, or activate
             the option "-sd" above in order to create a services.xml  using
             WSDL2Java -->
        <copy file="${basedir}/resources/services.xml"
            tofile="${build.service.dir}/resources/services.xml" overwrite="true" />
    </target>

    <!--
    Copy java source files.
    -->
    <target name="-service.build.copy" description="Copy service source files">
        <!-- copy source files -->
        <echo level="info" message="Copy service source file ..."/>
        <copy todir="${build.service.dir}/src/${project.package.path}/service/">
            <fileset dir="src/${project.package.path}/service/">
                <include name="**/*.java" />
                <exclude name="${webservice.name}Skeleton.java" />
            </fileset>
        </copy>
        <echo level="info" message="Copy util source file ..."/>
        <copy todir="${build.service.dir}/src/${project.package.path}/util/">
            <fileset dir="src/${project.package.path}/util/">
                <include name="**/*.java" />
            </fileset>
        </copy>
        <echo level="info" message="Copy service skeleton file ..."/>
        <copy file="src/${project.package.path}/service/${webservice.name}Skeleton.java"
            tofile="${build.service.dir}/src/${project.package.path}/service/${webservice.name}Skeleton.java" overwrite="true" />
    </target>

    <!--
    Clean project by deleting the build directory.
    -->
    <target name="build" description="Build service">
       <antcall target="service.build.public"/>
    </target>

    <!--
    Deploy the service to the Axis2 services directory and reload the Axis2 web
    application (public server).
    Note that you cannot deploy the Axis2 service file using the Apache Tomcat
    Manager web application. You can only deploy web application archives (*.war),
    but not axis2 service archives (*.aar). Instead, you can copy the axis2
    service archives to the Axis2 services directory and subsequently reload the
    Axis2 web application using the Apache Tomcat Manager. See target
    "service.deploy.public".
    -->
    <target name="service.build.public"
    depends="-service.build.copy,service.generate"
        description="Build service">
        <!--Build service-->
        <echo level="info" message="Building for public deployment ..."/>
        <antcall target="-service.build"/>
    </target>

    <!--
    Clean project by deleting the build directory.
    -->
    <target name="deploy" description="Deploy service">
       <antcall target="service.deploy.public"/>
    </target>

    <!--
    Deploy the service to the Axis2 services directory and reload the Axis2 web
    application (public server).
    Note that you cannot deploy the Axis2 service file using the Apache Tomcat
    Manager web application. You can only deploy web application archives (*.war),
    but not axis2 service archives (*.aar). Instead, you can copy the axis2
    service archives to the Axis2 services directory and subsequently reload the
    Axis2 web application using the Apache Tomcat Manager. See target
    "service.deploy.public".
    Note that the reload, deploy, and undeploy tasks require the apache-tomcat
    cataline-ant.jar to be placed in the ant libraries directory.
    -->
    <target name="service.deploy.public" depends="service.build.public" description="Deploy service">
        <echo level="info"
            message="Deploying ${webservice.file.name} on public server ..."/>
        <!--// insert_mark:cp_scp_switch //-->
        <echo level="info" message="Reloading Axis2 web application ..."/>
        <!--Note that the reload tasks requires the apache-tomcat cataline-ant.jar
        to be placed in the ant libraries directory.-->
        <reload
            url="http://${tomcat.public.host}:${tomcat.tomcat.public.http.port}/${tomcat.public.manager.context}"
            username="${tomcat.public.manager.user}"
            password="${tomcat.public.manager.pwd}"
            path="/${tomcat.public.axis.context}"/>
    </target>

    <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask"/>
    <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask"/>
    <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"/>

    <!--
    service.build
    Copy resources, compile service classes and create AAR service
    file.
    -->
    <target name="-service.build"  depends="service.generate,-service.build.copy"
        description="Build service">
        <mkdir dir="${build.service.dir}/classes" />
        <!-- Compile service -->
        <javac memoryMaximumSize="${jvm.heapspace.size}"
            memoryInitialSize="${jvm.heapspace.size}" fork="true"
            destdir="${build.service.dir}/classes"
            srcdir="${build.service.dir}/src"
            debug="true">
            <classpath refid="class.path"/>
        </javac>
        
        <!-- Copy resource files -->
        <copy toDir="${build.service.dir}/classes/META-INF" failonerror="false">
            <fileset dir="${build.service.dir}/resources">
                <include name="*.xml"/>
                <include name="*.wsdl"/>
                <include name="*.xsd"/>
                <include name="*.properties"/>
            </fileset>
        </copy>
        <!-- Create aar (service archive) -->
        <jar destfile="${build.service.dir}/${webservice.file.name}">
            <fileset dir="${build.service.dir}/classes"/>
        </jar>
    </target>

    <!-- ========================== CLEAN/REBUILD ========================== -->

    <!--
    Clean project by deleting the build directory.
    -->
    <target name="clean" description="Clean (Delete build directory)">
        <delete dir="build" />
    </target>

    <!-- ============================= TOMCAT ============================== -->

    <!--
    Check whether public Tomcat is running
    -->
    <target name="-tomcat.public.isrunning" description="Check whether public
    Tomcat is running">
        <condition property="tomcat.running">
            <socket server="${tomcat.public.host}" port="${tomcat.tomcat.public.http.port}"/>
        </condition>
    </target>

    <!--
    Javadoc.
    -->
    <target name="javadoc" description="Generate documentation">
        <delete dir="${basedir}/doc" />
        <mkdir dir="${basedir}/doc" />
        <javadoc
           destdir="doc"
           author="true"
           version="true"
           use="true"
           windowtitle="#GLOBAL_PROJECT_PREFIX##PROJECT_TITLE#">

            <fileset dir="src" defaultexcludes="yes">
                <include name="${project.package.path}/**"/>
                <exclude name="${project.package.path}/client/resources/**"/>
                <exclude name="${project.package.path}/client/*.form"/>
                <exclude name="**/*.xml"/>
            </fileset>

            <fileset dir="build/service/src" defaultexcludes="yes">
                <include name="${project.package.path}/**"/>
                <exclude name="${project.package.path}/client/resources/**"/>
                <exclude name="${project.package.path}/client/*.form"/>
                <exclude name="**/*.xml"/>
            </fileset>

            <fileset dir="build/client/src" defaultexcludes="yes">
                <include name="${project.package.path}/**"/>
                <exclude name="${project.package.path}/client/resources/**"/>
                <exclude name="${project.package.path}/client/*.form"/>
                <exclude name="**/*.xml"/>
            </fileset>


            <doctitle><![CDATA[<h1>#GLOBAL_PROJECT_PREFIX# Linuxfile Service</h1>]]>
            </doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2011 #GLOBAL_PROJECT_PREFIX# project.
			All Rights Reserved.</i>]]>
            </bottom>
            <classpath refid="class.path"/>
        </javadoc>
    </target>
</project>
